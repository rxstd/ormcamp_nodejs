
#### NodeJS Express 개론
 ## Node Module 이란?
  - 개발 생산성의 효율성과 편리한 유지보수를 위하여 복잡한 코드를 재사용 하기 간편하도록 사용 용도나 기능별로 파일을 분리하여 관리하는 것
  - 모듈 파일을 참조하여 다른 코드에서 재사용 할 수 있도록 하는 것

 ## Express같은 프레임워크를 사용하는 이유.
  - NodeJS는 웹 서버를 만들기 위한 기본적인 기능만 제공하고 있기 때문에, 웹 서버를 만들기 위해서는 많은 양의 코드를 작성해야 한다.
  - Express는 NodeJS의 기본 기능 외에도 웹 서버를 만들기 위한 다양한 기능을 제공한다.
  - MVC 개발 패턴을 구현하여 코드를 구조화할 수 있다.
  - ORM 혹은 쿼리 빌더를 사용하여 데이터베이스를 쉽게 다룰 수 있다.

 ## Express 설치
  1. npm i -g express-generator
  2. express --view=ejs [Project Name]
  3. cd [Project Name]
  4. npm i
  5. npm start

 ## MVC 구조에 관한 이해
  - MVC는 Model, View, Controller의 약자로 소프트웨어 디자인 패턴이다.
  - Model : 데이터를 관리하는 부분이다. 백엔드 어플리케이션 내에서 데이터를 처리하는 모든 기능을 담당한다.
  - View : 사용자에게 보여지는 부분이다. UI/UX (HTML/CSS/JS) 부분을 담당한다. 모델에 있는 데이터를 가공하여 HTML을 변조하여 사용자에게 보여준다.
    NodeJS 에서의 View는 EJS, Pug, Handlebars 등이 있다.
  - Controller : Model과 View 사이에서 사용자의 요청을 받고 처리하는 부분이다. (Routes - 라우팅)
    사용자의 요청을 받아 Model에게 데이터를 요청하고, Model로부터 받은 데이터를 View에게 전달한다. 간단하게 말하면 사용자의 요청과 응답을 처리하는 부분이다.
    유저가 요청한 URL을 매핑하여 해당 URL에 맞는 데이터를 Model에게 요청하게 된다.

 ## Express-Generator 를 통해 생성한 프로젝트의 기본적인 구조
  - bin/www : 서버를 실행하는 스크립트 파일
  - app.js : Express의 주요 설정 파일 (라우팅, 미들웨어 등)
  - public : 정적 파일들을 모아두는 폴더 (이미지, CSS, JS 등)
  - routes : 라우팅을 위한 폴더 (라우팅이란? 사용자의 요청에 따라 응답을 해주는 것)
  - views : 템플릿 파일들을 모아두는 폴더 (템플릿이란? HTML을 동적으로 생성하기 위한 파일)
  - package.json : 프로젝트의 정보와 사용중인 모듈들의 버전을 관리하는 파일 (npm init 명령어를 통해 생성 가능, node_modules가 없어도 npm i 명령어를 통해 package.json에 있는 모듈들을 설치할 수 있다.)

 ## 작업 시작
  - npm i -g nodemon : 서버를 실행할 때마다 서버를 재시작하지 않아도 변경사항이 자동으로 반영되도록 해주는 모듈
  - nodemon app.js : 서버 실행
  