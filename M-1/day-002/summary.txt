## Github 실제 연동
 1. github 페이지에서 새 Repository 생성.
 2. 새로운 프로젝트 폴더를 생성.
 3. git remote add origin https://github.com/rxstd/ormcamp_nodejs.git 실행.
    2번에서 만든 프로젝트 폴더 내에서 실행해야한다. 해당 프로젝트 폴더를 1번에서 만든 Repository에 연동하는 과정.
 4. git push origin main 실행.
    main 이라는 브랜치를 통해 github 저장소에 내용을 푸시하는 과정이다.

 번외 1. error: src refspec main does not match any
        error: failed to push some refs to 'https://github.com/~~/~~.git'
        위와 같은 에러가 발생하는 경우가 있다. 이는 main이라는 브랜치가 없어 발생하는 문제인것이다.
        git branch -M main 이 명령어를 통해 main 브랜치를 마스터브랜치로 설정할 수 있다.
        설정 후 git push origin main을 다시 실행하면 main 브랜치를 통해 원격저장소로 푸시된것을 확인할 수 있다.
        github에서는 메인 브랜치명을 main으로 사용하는데 git에서는 master라는 이름을 사용하여 발생하는 문제이다.

 번외 2. Github의 Private Repository에 접근하거나 push하려면 인증 정보가 필요하다.
        Github에서는 Fine-Grained 이라는 방식과 Classic 이라는 방식으로 두가지의 token을 지원한다.
        https://github.com/settings/tokens 에 접근하면 새로운 인증 토큰을 발급받을 수 있다.
        발급하면서 접근 가능한 Repository와 그 외 권한 등을 설정할 수 있다.
        발급된 토큰을 통해 작업환경에 세팅하면 해당 토큰에 연동된 계정만큼의 Repository나 github api에 접근할 수 있게 된다.

 번외 3. github가 연동된 작업환경에서는 윈도우 OS 기준에서 "자격 증명 관리자" 내에 github 세션 체인이 저장되게 된다.
        이와 같은 사례로 Mac OS에서는 "키체인 접근" 에서 github 세션 체인을 관리할 수 있다. keychain.png 참조.

## .gitignore
 - 프로젝트 폴더 최상단에 .gitignore 파일을 생성하면 그 안에 있는 파일목록 (파일명) 들은 git index에 스테이징되지 않는다.
 - .DS_Store 파일처럼 필요없는 파일을 자동으로 올리는일이 없도록 .gitignore 파일 내에 추가하면 된다.

## VSCode 내에 있는 git 관련 GUI 도구
 - VSCode를 실행하면 좌측에 branch 모양 아이콘이 있다.
 - 해당 아이콘을 클릭하면 손쉽게 GUI를 통해 Staging과 Commit 기능 등을 관리할 수 있다.

## Git clone
 - 기존 프로젝트에 새롭게 참여하는 인원이나, 오픈소스로 올라가 있는 데이터를 가져다 사용할때 유용하게 사용되곤 한다.
 - git clone https://github.com/~~/~~.git 을 실행하게 될 경우 해당 데이터를 원래 처음부터 함께 작업하던 사람처럼 파일구조까지 완벽하게 세팅된다.

## Github Collaborator
 - Repository에서 Settings -> Access 탬의 Collaborator 메뉴로 들어가면 Add People 버튼을 눌러 협업하고자 하는 사람을 레포지토리에 초대할 수 있다.
 - 초대받은 인원은 해당 레포지토리에 액세스 권한이 부여되어, 커밋과 푸시를 자유롭게 할 수 있다.

## Danger Zone
 - 딱 봐도 위험해 보인다. 사용하는 레포지토리에서는 건들일 없도록 하자. 잘못되는 경우가 생길 수 있다.