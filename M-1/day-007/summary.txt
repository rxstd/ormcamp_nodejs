2023 12 06 - 디자인 패턴들에 대한 다양한 개론 및 개발 방향성

#### Basics of Design Patterns
 ## 디자인 패턴 (Design Pattern) 이란?
  - 소프트웨어 공학에서 패턴이라는 용어는 근/현대에서 각종 소프트웨어 및 시스템을 구축하며 직면했던 대표적인 주요 문제점들의 해결책에 대한 설계방법들을 유형별로 정리해 둔 것임.
  - 소프트웨어 디자인 패턴(Software Design Pattern)은 소프트웨어 공학에서 소프트웨어 디자인에서 공통적으로 발생하는 문제들에 대한 재사용 가능한 해결책임.
  - 소프트웨어 디자인 패턴은 소프트웨어 디자인에서 특정 맥락에서 자주 발생하는 문제에 대해 설명한 것이며, 이를 통해 설계를 할 때 이러한 문제들을 피할 수 있도록 도와줌.
  - 이렇게 정리된 해결방안들은 디테일해지고 구체적으로 관리되어 이전 이후 개발 세대들이 시행착오를 거치지 않고도 효율적인 소프트웨어를 개발할 수 있도록 도와줌.
  
 ## 디자인 패턴의 종류
  - MVC 패턴
  - MVVM 패턴
  - MVP 패턴

 ## MVC 패턴의 개요
  - MVC 패턴은 소프트웨어 공학에서 가장 보편적으로 사용되는 소프트웨어 디자인 패턴 중 하나임.
  - 주로 웹 기반 사용자 요청에 대한 서버측에서의 클라이언트(웹 브라우저, 모바일앱 등)의 요청과 응답에 대한 처리(Controller)와 서버측 에서의 HTML (View) 생성, 그리고 DB서버와의 연동을 통한 클라이언트에게 전달된 데이터의 처리 및 저장된 데이터 처리(Model)에 대하여 어떻게 설계하고 처리해야 하는가에 대한 처리지침 및 기본 가이드라인을 제공함.
 
 ## MVC 패턴의 구성요소
  - Model : 데이터를 처리하는 부분으로, 데이터베이스와의 연동을 통해 데이터를 처리하고, 처리된 데이터를 Controller에게 전달함.
  - View : 사용자에게 보여지는 부분으로, HTML, CSS, JavaScript 등을 통해 사용자에게 보여지는 화면을 구성하고, 사용자의 요청을 Controller에게 전달함.
  - Controller : 사용자의 요청을 받아 Model과 View를 제어하는 부분으로, 사용자의 요청을 받아 Model에게 데이터를 요청하고, Model로부터 받은 데이터를 View에게 전달하여 사용자에게 보여줌.
  - mvc_map.png 파일 참조.
 
 ## HyperText 약어
  - HTTP(HyperText Transfer Protocol) : 웹상에서 클라이언트와 서버 간에 요청/응답으로 데이터를 주고 받기 위한 통신 규약.
  - HTML(HyperText Markup Language) : 웹상에서 사용되는 문서를 작성하기 위한 마크업 언어.

 ## 서버에 대한 요청의 유형
  - 웹페이지를 요청하는 경우 (HTML)
  - 웹페이지와 API 데이터를 요청하는 경우 (HTML + API)
  - API 데이터만을 요청하는 경우 (REST API)

 ## 인터넷 주소의 구성
  - 통신규약://특정웹사이트(호스트).도메인주소(웹서버주소):포트번호/컨트롤러명(라우터)/라우팅메소드(액션)

 ## Express에서 res에 대한 함수들 정리
  - res.send() : 문자열을 응답함.
  - res.sendFile() : 파일을 응답함.
  - res.json() : JSON 형태의 데이터를 응답함.
  - res.render() : 템플릿 엔진을 통해 렌더링된 HTML을 응답함.
  - res.redirect() : 특정 경로로 리다이렉트함.

 ## Express에서 req에 대한 함수들 정리
  - req.params : URL의 파라미터를 읽어옴.
  - req.query : URL의 쿼리스트링을 읽어옴.
  - req.body : POST 요청의 본문을 읽어옴.
  - req.get() : 헤더의 값을 읽어옴.

 ## HTML의 form 태그 내의 요소들 정리
  - form 태그 : 사용자의 입력을 받아 서버로 전송하는 역할을 함.
  - form action 속성 : form 태그 내의 요소들의 데이터를 전송할 서버의 주소를 지정함. (<form ... action="/auth/login"> 와 같이 사용)
  - form method 속성 : form 태그 내의 요소들의 데이터를 전송할 서버의 통신규약을 지정함. (<form ... method="POST"> 와 같이 사용)

 ## HTTP 요청 방식 정리
  - GET : 데이터를 조회하기 위해 서버에 요청하는 방식으로, URL에 데이터를 포함하여 전송함.
  - POST : 데이터를 생성하기 위해 서버에 요청하는 방식으로, URL에 데이터를 포함하지 않고 본문에 데이터를 포함하여 전송함.
  - PUT : 데이터를 수정하기 위해 서버에 요청하는 방식으로, URL에 데이터를 포함하지 않고 본문에 데이터를 포함하여 전송함.
  - DELETE : 데이터를 삭제하기 위해 서버에 요청하는 방식으로, URL에 데이터를 포함하여 전송함.
  - OPTION : 서버에 특정 요청을 하기 전에 통신 옵션을 설명하기 위해 서버에 요청하는 방식으로, URL에 데이터를 포함하지 않고 본문에 데이터를 포함하여 전송함.
  - PATCH : 데이터를 부분적으로 수정하기 위해 서버에 요청하는 방식으로, URL에 데이터를 포함하지 않고 본문에 데이터를 포함하여 전송함.

 ## HTTP 응답 상태 코드 정리
  - 1xx : 처리중 (100 Continue, 101 Switching Protocols)
  - 2xx : 성공 (200 OK, 201 Created, 202 Accepted, 204 No Content)
  - 3xx : 리다이렉션 완료 (301 Moved Permanently, 302 Found, 304 Not Modified)
  - 4xx : 클라이언트 오류 (400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found)
  - 5xx : 서버 오류 (500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable)

 ## 도메인 주소에 대한 구성
  - DNS(Domain Name System) : 도메인 주소를 IP 주소로 변환하는 시스템.
  - DNS Server : 도메인 주소를 IP 주소로 변환하는 서버로, DNS 서버에 도메인 주소를 입력하면 IP 주소를 반환함.
  - 도메인 주소 : IP 주소를 기억하기 어려워서 만든 문자열로, 도메인 주소를 통해 IP 주소를 찾아감.
