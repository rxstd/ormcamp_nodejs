2023 11 30 DAY 003 - NodeJS (금일은 이론개념의 고도화이므로, 개인적인 견해가 많이 포함됨.)

#### Version of Elemental Languages for WWW
 ## CSS
  - CSS 1~3까지 넘버링으로 네이밍
 ## HTML
  - HTML 1~5까지 넘버링으로 네이밍
 ## Javascript
  - Javascript는 1~4처럼 넘버링으로 표기하지 않고 ECMA 2015 등처럼 규약명을 붙여 네이밍

#### Basics of Javascript (Node.js)
 ## 기초 CLI 명령어
  - node -v => NodeJS의 버전을 표기하는 명령어임. (v18.17.1)
  - nvm ls => nvm은 nodejs version manager의 약자로, 한 워크스테이션에서 여러개의 NodeJS 버전을 설치하고 관리할 수 있도록 도와준다.
  - LTS => Long Term Support (Long Term Service 아님 ㅠ) 3년동안은 해당 버전을 LTS로 지정하여 유지하면서 기능 변화나 패치에 대한 의존성 문제에 대한 고민을 줄여준다.

 ## About NodeJS
  - NodeJS는 백엔드 프론트엔드 뿐만 아니라 기타 시스템을 구현할때에도 다방면으로 사용된다.
  - NPM (Node Package Manager)를 통해 외부 라이브러리나 프레임워크 등을 워크스테이션에 설치하여 활용할 수 있다.
  - NVM (Node Version Manager)를 통해 NodeJS 버전을 자유롭게 컨트롤 할 수 있다.
  - NodeJS를 통해 웹 브라우저 내에서만 Javascript를 사용하는것이 아닌 서버 내에서도 해당 런타임을 가져와서 씹고 뜯고 맛볼수있다.

 ## JavaScript Debug Terminal 내에서의 실습 내용

    ➜  day-003 git:(main) ✗ node -v
    v18.17.1

    ➜  day-003 git:(main) ✗ npm -v
    Debugger attached.
    10.1.0
    Waiting for the debugger to disconnect...

    ➜  day-003 git:(main) ✗ npm -version
    Debugger attached.
    10.1.0
    Waiting for the debugger to disconnect...

 ## 개발 언어와 프레임워크의 차이
  - 개발 언어는 기본적으로 처음부터 원하는 결과물을 만들어낼 수 있도록 만들어진 것이다.
  - 프레임워크는 그 개발 언어에 기반을 두면서 개발 속도를 빠르게 하거나 간편하게 여러 기능을 구현할 수 있도록 돕는 개념이다.
  - 개발 언어에는 컴파일 언어 (Compile Language)와 인터프리팅 언어 (Interpreting Language)가 있다.
  - Complie 언어에는 C, C++, C#, Java, Rust, Go 등이 있다. 이들의 특징은 코드 작성 후 해당 코드를 작성한 IDE를 통해 빌드 혹은 컴파일을 거쳐야 실행이 가능하다.
  - Interpreting 언어에는 Python, Javascript, HTML, CSS, SQL, PHP, ASP 등이 있다. 이들은 별도의 빌드과정을 거치지 않더라도
    Line-By-Line 개념으로 해당 코드가 실행될때마다 자동으로 한줄씩 컴파일되어 실행된다. 개발 속도가 빠른 장점이 있지만 컴파일 언어에 비해 퍼포먼스가 저조하다.
  
 ## 런타임 (Runtime) 이란?
  - 개발자가 짜낸 코드가 실행되기 위하여 제공되는 환경을 이야기한다.
  - 예를 들어 C 코드를 작성하고 이를 실행하기 위해서는 C언어 런타임이 있어야 컴파일이 가능하다.
  - 런타임마다 네이밍이 있다. 예를 들어 Visual Basic으로 작성된 프로그램이 실행되기 위해서는 VBRuntime. Java로 작성된 프로그램이 실행되기 위해서는 JRE (Java Runtime Environment) 등이 있다.

 ## 패키징, 번들링, 웹팩의 기본개념
  - 예를 들면 React 프레임워크 내의 문법으로 작성된 코드를 순수 자바스크립트 (Vanilla Javascript)로 난독화 및 변환하여 웹팩으로 묶어 배포하는 것을 번들링(Bundling) 이라고 한다.

 ## 라이브러리, 패키지의 기본개념
  - 예를 들어 시간을 포맷별로 (YYYY-mm-dd 혹은 mm/dd/YYYY) 표현하고싶은 경우 이를 코드로 직접 작성하려면 몇줄 가량 되는 코드를 작성해야 한다.
    이에 대해 재활용도가 높고 계속 쉽게 사용하면 개발시간이 단축될 수 있는 경우에 사용하는 시나리오를 생각해보자.
    시간 포맷해주는 로직을 쉽게 쓸수있도록 함수형으로 만들어둔 라이브러리를 설치하고 이를 내 코드에 include 하게 되면,
    내가 시간 관련 코드를 따로 작성하지 않고 패키지만 설치하고 그 용법만 알더라도 쉽게 내가 원하는 로직을 구현할 수 있게 된다.
    이와 같은 개념이 라이브러리의 개념이다.
  - 위와 같은 라이브러리를 내가 쓰는 런타임 버전에 알맞게 설치할 수 있도록 도와주는것이 패키지 매니저이고, 이를 통해 의존성이 있는 다른 라이브러리와 내가 원하는 로직이 묶어 설치되는것을 패키지로 칭한다.
  - 패키지 매니저로는 Javascript에 NPM, 파이썬에 PIP 등이 있다.

 ## NPM 및 NodeJS 에 대한 기초 개요
  - 프로젝트 루트 디렉토리에 npm init을 실행하면 package.json이 생성된다. 이는 패키지 의존성을 위한 파일이다.
    설치된 패키지들에 대한 버전을 고정시켜 저장하여 차후에 다른 환경에서 새로 세팅시에도 해당 버전을 재설치 할수 있게끔 하여 코드 실행시에 라이브러리 버전 변경에 따른 오류를 없앨 수 있다.
  - 서버 내에서 작동되는 Javascript 파일 (.js)은 모듈 파일이라고 칭한다.
  - npm init을 입력하고 정보를 입력하면 패키지로 만들어 낼 수 있다.

 ## 디버거 (Debugger)에 대한 기초 개요
  - 빠르게 코드 상의 오류 또는 버그를 잡아낼 수 있도록 도와주는 도구이다.
  - 코드에 오류가 있다면 어떤 파일의 몇번 줄에 오류가 있다고 표기를 함으로써 문제의 위치를 파악할 수 있도록 돕는다.
  - 디버거에는 BreakPoint 라는 것이 존재한다. 예를 들어 코드 중간에서 debugger breakpoint를 설정하면, 해당 줄까지 Interpreting(한줄씩 실행)된 뒤 멈춘다.
  - BreakPoint를 걸어두고, F10 을 누르면 BreakPoint에서 멈춘 뒤부터 코드가 한줄씩 실행된다. (맥에서는 fn+f10)
  - BreakPoint를 걸어두고, F5를 누르면 BreakPoint에서 멈춘 뒤 다음 BreakPoint나 코드 끝까지 실행된다. (맥에서는 fn+f5)

 ## Json에 대한 기초 개요
  - json 데이터는 javascript에서 묶음 배열 등을 간편하게 처리하기 위한 객체 파일구조이다.
  - json을 통해 프론트엔드와 백엔드가 통신할 수 있다. Javascript 내에서 json 데이터파일 구조를 배열로 읽어들이기도 간편하다.
  - json data는 object data로 변환된다. 데이터를 다루는 프로젝트라면 json을 다루는것은 필수사항이다.
  - package.json도 json 데이터파일 구조로 작성된다.

 ## NodeJS 개발 및 협업, 배포에 대한 시나리오
  1. npm init을 통해 작업할 프로젝트 루트 디렉토리에 npm 환경을 조성한다. (package.json 생성 과정)
  2. 각종 라이브러리를 설치하고 js 파일들을 작성한 뒤 완성한다.
  3. 다른 사람이 이 프로젝트 파일을 받았을때, node_modules 폴더 (npm을 통해 설치한 라이브러리들의 파일)은 포함되지 않은 채로 공유되게 된다.
  4. 해당 프로젝트를 다운로드 완료하고 난 뒤에는, 해당 프로젝트 폴더 내에서 npm install을 실행한다. (package.json 내에 있는 dependency 라이브러리 설치 과정)
  5. 설치가 완료되고 난 뒤 해당 프로젝트를 실행하면 정상적으로 실행되게 된다.
  
 ## package의 dependency 기초 개념
  1. A라는 패키지는 B라는 패키지와 C라는 패키지를 사용하여 만들어졌고, B라는 패키지가 D라는 패키지를 사용하여 만들어졌다고 가정해보자.
  2. npm install A를 하게 된다면 package.json 내의 dependency tree를 참조하여 A 패키지는 B와 C 패키지를 호출하고, B 패키지는 D 패키지를 호출한다.
  3. 결국에는 npm install A 명령어 하나 만으로 A B C D 패키지가 전부 설치되게 되는것이다.

 ## NodeJS에서의 라이브러리의 사용
  - 서버에서 사용하는 모듈형 js에서는 [ const moment = require("moment"); ] 과 같이 const 상수로 네이밍을 하고, require 예약어함수로 패키지를 불러온다.